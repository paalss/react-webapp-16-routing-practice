{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetails.js"],"names":["module","exports","HighlightedQuote","text","author","className","classes","quote","NewCommentForm","onAddedComment","quoteId","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","useEffect","form","onSubmit","event","preventDefault","enteredText","current","value","commentData","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","console","log","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetails","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.fa453c8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","import classes from \"./HighlightedQuote.module.css\";\n\nconst HighlightedQuote = ({ text, author }) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{text}</p>\n      <figcaption>{author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect, useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = ({ onAddedComment, quoteId }) => {\n  const commentTextRef = useRef();\n\n  // sendRequest skal ha addComment tilgjengelig i sitt outer environment\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // sendRequest vil kjøre addComment({text:enteredText}, quoteId)\n    sendRequest({ commentData: { text: enteredText }, quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from \"./CommentItem.module.css\";\n\nconst CommentItem = ({ text }) => {\n  return (\n    <li className={classes.item}>\n      <p>{text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = ({ comments }) => {\n  return (\n    <ul className={classes.comments}>\n      {comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentsList from \"./CommentsList\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport { getAllComments } from \"../../lib/api\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  console.log('empty?');\n  console.log(params);\n\n  const { quoteId } = params;\n\n  // sendRequest skal ha getAllComments tilgjengelig i sitt outer environment\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    // vil kjøre getAllComments(quoteId)\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    // ferdig med å adde comment, nå må vi re-fetch comments\n    // sendRequest vil kjøre getAllComments(quoteId)\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          onAddedComment={addedCommentHandler}\n          quoteId={quoteId}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { useEffect } from \"react\";\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport useHttp from \"../hooks/use-http\";\n\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport Comments from \"../components/comments/Comments\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport { getSingleQuote } from \"../lib/api\";\n\nconst QuoteDetails = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  // sendRequest skal ha getSingleQuote tilgjengelig i sitt outer environment\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    // vil kjøre getSingleQuote(quoteId)\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n\n  // Får hentet quotes, rendre det\n  console.log(match);\n  \n  return (\n    <div>\n      <section>\n        <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      </section>\n\n      <div className=\"centered\">\n        <Route path={match.path} exact>\n          <Link to={`${match.url}/comments`} className=\"btn--flat\">\n            Load comments\n          </Link>\n        </Route>\n      </div>\n\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </div>\n  );\n};\n\nexport default QuoteDetails;\n"],"sourceRoot":""}