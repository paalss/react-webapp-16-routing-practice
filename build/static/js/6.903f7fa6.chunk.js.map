{"version":3,"sources":["components/quotes/QuoteForm.module.css","components/UI/Card.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/AddQuote.js"],"names":["module","exports","Card","children","className","classes","card","QuoteForm","onAddQuote","isLoading","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","author","text","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","AddQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quote"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,mBCArID,EAAOC,QAAU,CAAC,KAAO,qB,kHCKVC,EAJF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACd,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,K,QCqEzBI,EAjEG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UACzBC,EAAiBC,mBACjBC,EAAeD,mBACrB,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OACE,eAAC,WAAD,WAEE,cAAC,IAAD,CACEC,KAAMF,EACNG,QAAS,SAACC,GAAD,MACP,mEAGJ,cAAC,EAAD,UACE,uBACEC,QAtBmB,WACzBJ,GAAc,IAsBRX,UAAWC,IAAQe,KACnBC,SAjCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBd,EAAee,QAAQC,MACvCC,EAAcf,EAAaa,QAAQC,MAEzClB,EAAW,CAAEoB,OAAQJ,EAAeK,KAAMF,KAwBtC,UAKGlB,GACC,qBAAKL,UAAWC,IAAQyB,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK3B,UAAWC,IAAQ2B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK1B,OAEtC,sBAAKN,UAAWC,IAAQ2B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKxB,OAEpC,qBAAKR,UAAWC,IAAQiC,QAAxB,SACE,wBAAQC,QAlCY,WAC5BxB,GAAc,IAiCkCX,UAAU,MAAlD,kC,QCjCGoC,UAtBE,WAEf,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAGhBC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,gBAEd,CAACJ,EAAQC,IAOZ,OACE,cAAC,EAAD,CAAWpC,UAAsB,YAAXmC,EAAsBpC,WANtB,SAACyC,GAEvBN,EAAYM","file":"static/js/6.903f7fa6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","import classes from \"./Card.module.css\";\n\nconst Card = ({ children }) => {\n  return <div className={classes.card}>{children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from \"react\";\n\nimport classes from \"./QuoteForm.module.css\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport { Prompt } from \"react-router\";\n\nconst QuoteForm = ({ onAddQuote, isLoading }) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n\n  // Fjern grunnen til å prompte brukeren når det navigeres\n  // til annen side. Det skal skje før submitFormHandler funksjon\n  // da den rekker å navigere før state endres\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  return (\n    <Fragment>\n      {/* Prompt brukeren om de har berørt form og prøver å navigere seg bort */}\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sure you want to leave? All entered data will be lost\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useHttp from \"../hooks/use-http\";\n\nimport QuoteForm from \"./../components/quotes/QuoteForm\";\nimport { addQuote } from \"../lib/api\";\n\nconst AddQuote = () => {\n  // sendRequest skal ha addQuote tilgjengelig i sitt outer environment\n  const { sendRequest, status } = useHttp(addQuote);\n  const history = useHistory();\n\n  // Sjekk om status er completed, da vil vi navigere bort\n  useEffect(() => {\n    if (status === \"completed\") {\n      history.push(\"/allQuotes\");\n    }\n  }, [status, history]);\n\n  const addQuoteHandler = (quote) => {\n    // vil kjøre addQuote(quote)\n    sendRequest(quote);\n  };\n\n  return (\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={addQuoteHandler} />\n  );\n};\n\nexport default AddQuote;\n"],"sourceRoot":""}